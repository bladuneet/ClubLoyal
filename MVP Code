MVP Tech Stack
Backend: Django + Django REST Framework

Frontend: React

Database: PostgreSQL (or SQLite for MVP)

Authentication: JWT-based

Payment (Mock): Stripe API structure (can be extended to crypto)

📁 Folder Structure
cpp

clubloyal-mvp/
├── backend/
│   ├── manage.py
│   ├── requirements.txt
│   ├── core/
│   │   ├── models.py
│   │   ├── views.py
│   │   ├── urls.py
│   │   ├── serializers.py
│   │   └── analytics.py
│   └── clubloyal/
│       ├── settings.py
│       └── urls.py
├── frontend/
│   ├── public/
│   └── src/
│       ├── App.js
│       ├── pages/
│       ├── components/
│       └── services/
└── README.md


✅ Backend Highlights
models.py
python

from django.db import models
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    tier = models.CharField(max_length=50, default="Bronze")  # Bronze, Silver, Gold

class LoyaltyTransaction(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    activity = models.CharField(max_length=100)  # e.g., "ticket purchase"
    points = models.IntegerField()
    timestamp = models.DateTimeField(auto_now_add=True)

class Wallet(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    balance = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    team_tokens = models.IntegerField(default=0)

class Purchase(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    item = models.CharField(max_length=100)
    cost = models.DecimalField(max_digits=10, decimal_places=2)
    used_points = models.IntegerField(default=0)
    paid_with = models.CharField(max_length=20, default="credit_card")  # or tokens
views.py (Sample Endpoints)
python

from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from .models import LoyaltyTransaction, Wallet, Purchase
from rest_framework.permissions import IsAuthenticated

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def wallet_view(request):
    wallet, _ = Wallet.objects.get_or_create(user=request.user)
    return Response({
        "balance": wallet.balance,
        "team_tokens": wallet.team_tokens
    })

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def add_loyalty_points(request):
    activity = request.data.get("activity")
    points = int(request.data.get("points", 0))
    LoyaltyTransaction.objects.create(user=request.user, activity=activity, points=points)
    return Response({"message": f"{points} points added for {activity}."})

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def make_purchase(request):
    item = request.data.get("item")
    cost = float(request.data.get("cost"))
    use_points = int(request.data.get("use_points", 0))
    wallet, _ = Wallet.objects.get_or_create(user=request.user)
    if wallet.balance < cost:
        return Response({"error": "Insufficient balance"}, status=400)
    wallet.balance -= cost
    wallet.save()
    Purchase.objects.create(user=request.user, item=item, cost=cost, used_points=use_points)
    return Response({"message": "Purchase successful"})
analytics.py (Fan Behavior & Prediction)
python

from .models import LoyaltyTransaction
from django.db.models import Sum
from datetime import timedelta
from django.utils import timezone

def get_loyal_user_rankings():
    last_30_days = timezone.now() - timedelta(days=30)
    return LoyaltyTransaction.objects.filter(timestamp__gte=last_30_days) \
        .values('user__username') \
        .annotate(total_points=Sum('points')) \
        .order_by('-total_points')
serializers.py
python

from rest_framework import serializers
from .models import LoyaltyTransaction, Wallet, Purchase

class LoyaltyTransactionSerializer(serializers.ModelSerializer):
    class Meta:
        model = LoyaltyTransaction
        fields = '__all__'

class WalletSerializer(serializers.ModelSerializer):
    class Meta:
        model = Wallet
        fields = '__all__'

class PurchaseSerializer(serializers.ModelSerializer):
    class Meta:
        model = Purchase
        fields = '__all__'
🖥️ Frontend (React)
/pages/Dashboard.js
jsx

import React, { useEffect, useState } from 'react';
import axios from 'axios';

const Dashboard = () => {
  const [wallet, setWallet] = useState({});

  useEffect(() => {
    axios.get('/api/wallet/', {
      headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
    }).then(res => setWallet(res.data));
  }, []);

  return (
    <div>
      <h2>Wallet</h2>
      <p>Balance: ${wallet.balance}</p>
      <p>Team Tokens: {wallet.team_tokens}</p>
    </div>
  );
};

export default Dashboard;
📦 requirements.txt
txt

Django>=4.2
djangorestframework
djangorestframework-simplejwt
psycopg2
🚀 GitHub README.md
md

# ClubLoyal MVP

## What is it?
A sports loyalty platform with digital wallet features designed for fan engagement and stadium sales.

## Features
- 🏆 Customizable loyalty rewards
- 💳 In-app wallet (USD & team tokens)
- 📈 Fan analytics dashboard
- 🌐 Web + Kiosk + Mobile-ready APIs

## Setup

1. Backend
```bash
cd backend
pip install -r requirements.txt
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver
Frontend

bash

cd frontend
npm install
npm start
Roadmap
NFT Ticketing (Next)

Crypto Wallet Integration

AR-based Stadium Games

yaml
